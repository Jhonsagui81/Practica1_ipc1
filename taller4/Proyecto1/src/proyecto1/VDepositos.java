package proyecto1;

import java.time.LocalDateTime;
import javax.swing.JOptionPane;


public class VDepositos extends javax.swing.JInternalFrame {
   
    public int indice;
    Clientes[] infoPersona = new Clientes[5];

    public VDepositos(Clientes[] persona) {
        this.infoPersona = persona;
        initComponents();
        mostrarInformacionCuentas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboCuentas = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        btmAceptar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Depositos");

        jLabel1.setText("CUENTA A DEPOSITAR:");

        comboCuentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("MONTO A DEPOSITAR:");

        btmAceptar.setText("ACEPTAR");
        btmAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboCuentas, 0, 401, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtCantidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(btmAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btmAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Cuentas a las que se les pude depositar 
    public void mostrarInformacionCuentas() {
        comboCuentas.removeAllItems();
        for (int i = 0; i < infoPersona.length; i++) {
            if (infoPersona[i].getNombre() != null) {  //si el nombre esta vacio NO SE CUENTA
                for (int j = 0; j < 5; j++) {   // depues de elegir la posicion de la persona, se utilizara este for para recorrer sus cuentas
                    if (infoPersona[i].cuentaAsociada[j].getIdCuenta() != 0) { //Cuentas con id = 0 NO SE CUENTAN 
                        comboCuentas.addItem(infoPersona[i].cuentaAsociada[j].getIdCuenta() + "- Cuenta de " + infoPersona[i].getNombre() + " " + infoPersona[i].getApellido());
                    }
                }

            }
        }
    }

    private void btmAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmAceptarActionPerformed
        
        if (!txtCantidad.getText().isEmpty()) {

            try {
                indice = comboCuentas.getSelectedIndex();
                String cantidad = txtCantidad.getText();
                //combierto a entero el monto ingresado
                double monto = Double.parseDouble(cantidad);
                if (monto > 0) {
                    for (int i = 0; i < infoPersona.length; i++) {
                        if (infoPersona[i].getNombre() != null) {
                            for (int j = 0; j < 5; j++) {
                                if (infoPersona[i].cuentaAsociada[j].getIdCuenta() == (indice + 1)) { // validar si encontro al cliente y cuenta con ese id
                                    infoPersona[i].cuentaAsociada[j].setSaldoCuenta(monto); //realizar la operacion 

                                    // Realizar asignacion al historial
                                    LocalDateTime horaFecha = LocalDateTime.now(); //guardar la fecha y la hora
                                    String info = "Deposito";   // guardar la descripcion de la operacion
                                    double saldoActual = infoPersona[i].cuentaAsociada[j].getSaldoCuenta();
                                    infoPersona[i].cuentaAsociada[j].AsociarOperacion(Proyecto1.ContadorOperaciones, horaFecha, info, 0, monto, saldoActual); //asignar datos a la operacion
                                    Proyecto1.ContadorOperaciones++; //aumenta la cantidad de operaciones

                                    //Mensajes de confirmacion
                                    JOptionPane.showMessageDialog(null, "Deposito realizado exitosamente.");
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El monto del deposito debe ser mayor a cero.");
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "¡Ingrese los datos como lo indica el manual de usuario!");
                txtCantidad.setText("");
            }
            // finaliza condicion que verifica que los campos tengan informacion 
        } else {
            JOptionPane.showMessageDialog(null, "¡Debe rellenar todos los campos!");
        }
        txtCantidad.setText("");


        
    }//GEN-LAST:event_btmAceptarActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmAceptar;
    private javax.swing.JComboBox<String> comboCuentas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtCantidad;
    // End of variables declaration//GEN-END:variables
}
