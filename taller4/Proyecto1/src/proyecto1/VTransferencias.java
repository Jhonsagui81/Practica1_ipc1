package proyecto1;

import java.time.LocalDateTime;
import javax.swing.JOptionPane;

public class VTransferencias extends javax.swing.JInternalFrame {
    
    //Indices para indicar las cuentas que realizaran las operaciones
    public int indiceTransferir;
    public int indiceAcreditar;
    //arreglo con la informacion de clientes 
    Clientes[] infoPersona = new Clientes[5];

    public VTransferencias(Clientes[] persona) {
        this.infoPersona = persona;
        initComponents();
        mostrarInformacionCuentasTransferencia();
        mostrarInformacionCuentasAcreditar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboTransferir = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        btmTransferir = new javax.swing.JButton();
        comboAcreditar = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setTitle("Transferencia");

        jLabel1.setText("TRANSFERIR DE:");

        comboTransferir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("ACREDITAR A:");

        jLabel3.setText("MONTO:");

        btmTransferir.setText("TRANSFERIR AHORA");
        btmTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmTransferirActionPerformed(evt);
            }
        });

        comboAcreditar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(comboTransferir, 0, 367, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtMonto)
                    .addComponent(comboAcreditar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(btmTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btmTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(9, 9, 9)
                        .addComponent(comboAcreditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Comobo1 informacion de cuentas que van a transferir

    public void mostrarInformacionCuentasTransferencia() {
        comboTransferir.removeAllItems();
        for (int i = 0; i < infoPersona.length; i++) {
            if (infoPersona[i].getNombre() != null) {  //si el nombre esta vacio NO SE CUENTA
                for (int j = 0; j < 5; j++) {   // depues de elegir la posicion de la persona, se utilizara este for para recorrer sus cuentas
                    if (infoPersona[i].cuentaAsociada[j].getIdCuenta() != 0) { //Cuentas con id = 0 NO SE CUENTAN 
                        comboTransferir.addItem(infoPersona[i].cuentaAsociada[j].getIdCuenta() + " - Cuenta de " + infoPersona[i].getNombre() + " " + infoPersona[i].getApellido());
                    }
                }

            }
        }
    }

    //Combo2 informacion de cuentas que se acredetiran
    public void mostrarInformacionCuentasAcreditar() {
        comboAcreditar.removeAllItems();
        for (int i = 0; i < infoPersona.length; i++) {
            if (infoPersona[i].getNombre() != null) {  //si el nombre esta vacio NO SE CUENTA
                for (int j = 0; j < 5; j++) {   // depues de elegir la posicion de la persona, se utilizara este for para recorrer sus cuentas
                    if (infoPersona[i].cuentaAsociada[j].getIdCuenta() != 0) { //Cuentas con id = 0 NO SE CUENTAN 
                        comboAcreditar.addItem(infoPersona[i].cuentaAsociada[j].getIdCuenta() + " - Cuenta de " + infoPersona[i].getNombre() + " " + infoPersona[i].getApellido());
                    }
                }

            }
        }
    }

    private void btmTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmTransferirActionPerformed
     
        //obteniendo indices elegidos
        indiceTransferir = comboTransferir.getSelectedIndex();
        indiceAcreditar = comboAcreditar.getSelectedIndex();

        //validar que el valor ingresado sea correcto y no este vacio
        if (!txtMonto.getText().isEmpty()) {

            //Para librar excepciones en el txt
            try {
                if (indiceTransferir == indiceAcreditar) {  // validar que las cuentas no sean iguales
                    JOptionPane.showMessageDialog(null, "La cuenta destino no puede ser igual a la cuenta origen.");
                } else {
                    //Validando el monto para las operaciones
                    String cantidad = txtMonto.getText();
                    double monto = Double.parseDouble(cantidad); //obtener la cantidad del monto
                    
                    if (monto > 0) { //validacion monto > 0
                        for (int i = 0; i < infoPersona.length; i++) { // recorre arreglo de clientes
                            if (infoPersona[i].getNombre() != null) { // excepto los que no estan asignados = Null
                                for (int j = 0; j < 5; j++) {  // recorre arreglo de las cuentas del cliente al 
                                    if (infoPersona[i].cuentaAsociada[j].getIdCuenta() == (indiceTransferir + 1)) { //valida que un cliente tenga el id de la cuenta
                                        //validar que el monto no supere el saldo de la cuenta 
                                        if (infoPersona[i].cuentaAsociada[j].getSaldoCuenta() >= monto) {   // validar que el monto a debitar sea mayor al saldo de la cuenta
                                            infoPersona[i].cuentaAsociada[j].retirarSaldo(monto);   // de cumplirse, se retira el fondo

                                            // Realizar asignacion al historial
                                            LocalDateTime horaFecha = LocalDateTime.now(); //guardar la fecha y la hora
                                            String info = "Transferencia";   // guardar la descripcion de la operacion
                                            double saldoActual = infoPersona[i].cuentaAsociada[j].getSaldoCuenta();
                                            infoPersona[i].cuentaAsociada[j].AsociarOperacion(Proyecto1.ContadorOperaciones, horaFecha, info, monto, 0, saldoActual); //asignar datos a la operacion
                                            Proyecto1.ContadorOperaciones++; //aumenta la cantidad de operaciones

                                        } else {
                                            JOptionPane.showMessageDialog(null, "La cuenta origen no tiene suficientes fondos.");
                                            monto = 0;  // se hace el valor del monto = 0 Para que al seguir el codigo no pueda seguir con la acreditacion
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        // hacer el mismo procedimiento para la cuenta, pero esta ves acreditando el monto debitado a la anterior
                        for (int i = 0; i < infoPersona.length; i++) {
                            if (infoPersona[i].getNombre() != null) {
                                for (int j = 0; j < 5; j++) {
                                    if (infoPersona[i].cuentaAsociada[j].getIdCuenta() == (indiceAcreditar + 1) && monto != 0) {  // encontrar cuenta a acreditar 
                                        
                                        infoPersona[i].cuentaAsociada[j].setSaldoCuenta(monto);     // acreditar saldo

                                        // Realizar asignacion al historial
                                        LocalDateTime horaFecha = LocalDateTime.now(); //guardar la fecha y la hora
                                        String info = "Transferencia";   // guardar la descripcion de la operacion
                                        double saldoActual = infoPersona[i].cuentaAsociada[j].getSaldoCuenta();
                                        infoPersona[i].cuentaAsociada[j].AsociarOperacion(Proyecto1.ContadorOperaciones, horaFecha, info, 0, monto, saldoActual); //asignar datos a la operacion
                                        Proyecto1.ContadorOperaciones++; //aumenta la cantidad de operaciones

                                        if (monto == 0) { // Para esto se hizo el valor del monto = 0 en la linea PENDIENTE 

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Transferencia realizada exitosamente.");
                                        }
                                    }
                                }
                            }
                        }
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "El monto del deposito debe ser mayor a cero.");
                    }
                    txtMonto.setText("");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "¡Ingrese los datos como lo indica el manual de usuario!");
                txtMonto.setText("");
            }
        } else {
            JOptionPane.showMessageDialog(null, "¡Debe rellenar todos los campos!");
        }
        

    }//GEN-LAST:event_btmTransferirActionPerformed


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmTransferir;
    private javax.swing.JComboBox<String> comboAcreditar;
    private javax.swing.JComboBox<String> comboTransferir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
